#version 420 core
out vec4 FragColor;

in vec2 TexCoords;

layout(std140, binding = 0) uniform Matrics{
						//	Base Alignment		Aligned Offset
	mat4 projection;	//		64					0
	mat4 view;			//		64					64
	vec3 viewPos;		//		16					128
						//	Total: 144 bytes
};


uniform sampler2D DepthBuffer;
uniform sampler2D NormalBuffer;

uniform float CameraFar;
uniform float CameraNear;
uniform float CascadeSplits[4];

uniform vec3 LightDirection;
uniform vec3 LightCornors[4];	//	右上-左上-右下-左下


uniform sampler2D LightDepthBuffer;
uniform mat4 LightSpaceMatrix;
uniform vec2 NearFarPlane;
uniform vec2 LightSize;
uniform vec3 LightCenter;

uniform float NormalBias;
uniform vec2  LightBias;

#define BLOCKER_SEARCH_NUM_SAMPLES 512
#define PCF_NUM_SAMPLES 512
#define NEAR_PLANE 1.0f
#define LIGHT_WORLD_SIZE 5.0
// #define LIGHT_FRUSTUM_WIDTH 3.75

// Assuming that LIGHT_FRUSTUM_WIDTH == LIGHT_FRUSTUM_HEIGHT 
// #define LIGHT_SIZE_UV (LIGHT_WORLD_SIZE / LIGHT_FRUSTUM_WIDTH)

vec2 poissonDisk[512]={
	vec2(0.127171,-0.997497),
	vec2(0.152501,-0.98529),
	vec2(0.0704062,-0.966918),
	vec2(0.0939054,-0.998718),
	vec2(-0.221229,-0.796442),
	vec2(0.336406,-0.806574),
	vec2(0.311502,-0.902707),
	vec2(0.207251,-0.210486),
	vec2(-0.0972625,-0.0238349),
	vec2(0.166112,-0.328532),
	vec2(-0.80871,-0.837092),
	vec2(-0.132176,-0.17008),
	vec2(-0.0939665,-0.460555),
	vec2(-0.47734,-0.550035),
	vec2(-0.535874,-0.176611),
	vec2(-0.782403,-0.528733),
	vec2(-0.466659,-0.792901),
	vec2(-0.227638,-0.901852),
	vec2(0.360515,-0.991211),
	vec2(0.225501,0.356548),
	vec2(0.952025,0.325968),
	vec2(0.814814,-0.857784),
	vec2(0.256996,0.722648),
vec2(0.150304,0.778008),
vec2(0.797235,-0.695608),
vec2(-0.474105,0.147801),
vec2(0.250587,-0.649037),
vec2(0.340556,0.66863),
vec2(-0.102939,0.717277),
vec2(0.49382,0.631947),
vec2(-0.764702,-0.371746),
vec2(-0.416425,-0.588977),
vec2(-0.568163,-0.500473),
vec2(0.857479,-0.588549),
vec2(-0.220008,0.506638),
vec2(0.11594,-0.250526),
vec2(0.882138,0.261452),
vec2(0.472091,0.472518),
vec2(0.100375,-0.222571),
vec2(-0.139927,-0.344646),
vec2(0.391339,0.254677),
vec2(0.336772,-0.0197455),
vec2(-0.790521,-0.463301),
vec2(-0.72045,-0.869625),
vec2(-0.639454,-0.0920743),
vec2(0.713553,0.293008),
vec2(0.635182,-0.467818),
vec2(0.833613,0.249794),
vec2(-0.491623,-0.795465),
vec2(0.402264,-0.00570697),
vec2(-0.780816,0.408246),
vec2(-0.0364086,-0.25602),
vec2(-0.813654,-0.0909757),
vec2(-0.348064,0.0414747),
vec2(0.648305,0.581042),
vec2(0.127903,0.475631),
vec2(-0.625294,-0.896542),
vec2(-0.145604,0.98175),
vec2(0.442854,0.286843),
vec2(0.685904,0.801508),
vec2(-0.0340281,0.830683),
vec2(0.455,-0.040376),
vec2(-0.232093,0.515427),
vec2(-0.45201,0.489242),
vec2(-0.937559,-0.274209),
vec2(0.515793,0.64452),
vec2(-0.551439,-0.13065),
vec2(-0.468551,-0.835078),
vec2(0.534532,0.251381),
vec2(-0.490585,-0.347697),
vec2(0.503769,-0.0300607),
vec2(-0.304178,0.123875),
vec2(0.934263,0.392621),
vec2(-0.454634,-0.196631),
vec2(0.184729,0.777764),
vec2(-0.305277,0.213233),
vec2(0.659536,0.602832),
vec2(-0.153172,0.629994),
vec2(0.264809,-0.837458),
vec2(0.377361,0.965087),
vec2(-0.631459,-0.00143439),
vec2(-0.52324,0.134556),
vec2(-0.422163,0.723991),
vec2(0.639882,0.979125),
vec2(-0.356548,-0.194983),
vec2(0.315165,-0.202673),
vec2(0.807733,0.861751),
vec2(0.527329,-0.444624),
vec2(0.904538,0.0514237),
vec2(0.28489,0.83404),
vec2(-0.472884,-0.904172),
vec2(0.584948,-0.422712),
vec2(-0.425947,-0.483871),
vec2(0.828791,-0.296182),
vec2(-0.51323,0.636952),
vec2(-0.54033,-0.355693),
vec2(-0.509018,0.922361),
vec2(0.635975,0.867183),
vec2(0.154515,-0.793207),
vec2(-0.248085,-0.545274),
vec2(0.574206,-0.617176),
vec2(-0.381512,0.793451),
vec2(0.504074,-0.891659),
vec2(0.116977,0.438581),
vec2(-0.262795,0.0958587),
vec2(-0.862239,-0.781182),
vec2(-0.945494,0.546251),
vec2(-0.383343,-0.359722),
vec2(0.0518509,-0.710074),
vec2(0.481429,-0.345561),
vec2(0.159093,0.196997),
vec2(0.320902,0.851741),
vec2(0.162572,0.419599),
vec2(-0.410504,-0.856441),
vec2(0.544359,-0.970763),
vec2(0.159093,0.994873),
vec2(-0.0497757,-0.389508),
vec2(0.0312204,-0.730094),
vec2(0.0991546,-0.625538),
vec2(0.0218818,-0.245521),
vec2(0.446516,0.354656),
vec2(0.231605,0.415326),
vec2(0.913938,-0.753288),
vec2(-0.887265,0.461287),
vec2(-0.00234991,-0.544114),
vec2(0.947874,-0.732658),
vec2(0.569262,-0.086642),
vec2(0.549425,0.224464),
vec2(0.678762,0.225196),
vec2(0.996094,-0.422468),
vec2(-0.324381,0.715262),
vec2(-0.7846,-0.685415),
vec2(0.957701,0.92584),
vec2(-0.772332,0.168798),
vec2(-0.338115,-0.863033),
vec2(-0.138279,-0.203528),
vec2(0.609119,0.468856),
vec2(0.756218,0.193396),
vec2(0.814692,0.127354),
vec2(-0.541551,-0.588183),
vec2(-0.121189,-0.641774),
vec2(-0.566454,-0.359233),
vec2(0.56737,0.669484),
vec2(-0.203894,0.712271),
vec2(0.897519,-0.11362),
vec2(0.57683,-0.904599),
vec2(0.0389721,-0.398785),
vec2(0.337382,-0.558092),
vec2(-0.65508,-0.420637),
vec2(-0.05533,0.744438),
vec2(0.823542,0.685598),
vec2(-0.681387,0.170568),
vec2(0.364055,-0.107944),
vec2(0.96411,0.63567),
vec2(0.028901,0.930906),
vec2(-0.898556,-0.82403),
vec2(0.725028,0.153722),
vec2(0.206702,0.185339),
vec2(-0.434004,0.161046),
vec2(-0.225684,0.577258),
vec2(-0.760918,0.763237),
vec2(-0.884518,0.935911),
vec2(-0.312296,-0.163915),
vec2(-0.996033,-0.282876),
vec2(-0.576891,-0.365886),
vec2(-0.0184637,0.563707),
vec2(0.778008,-0.877743),
vec2(0.137181,-0.20481),
vec2(0.413129,-0.109531),
vec2(0.170202,0.13712),
vec2(-0.608936,0.212439),
vec2(0.552049,-0.24955),
vec2(0.128574,0.81164),
vec2(0.259987,-0.605762),
vec2(0.686636,0.0278634),
vec2(0.458357,0.650258),
vec2(0.237465,0.381268),
vec2(0.756768,-0.206946),
vec2(0.20011,-0.494003),
vec2(0.281594,0.361553),
vec2(0.124485,0.901364),
vec2(0.0203558,-0.457381),
vec2(0.751945,-0.594714),
vec2(-0.701956,-0.660268),
vec2(0.383038,0.444197),
vec2(0.244301,0.11362),
vec2(0.0278634,0.196387),
vec2(-0.908628,0.0503861),
vec2(-0.486007,0.102206),
vec2(0.866573,-0.989319),
vec2(-0.800348,0.634999),
vec2(0.708975,-0.738334),
vec2(0.524644,-0.236793),
vec2(-0.346904,-0.869503),
vec2(-0.849788,-0.96765),
vec2(-0.987487,-0.260353),
vec2(0.149205,-0.539781),
vec2(-0.290628,0.492904),
vec2(-0.770501,-0.121189),
vec2(-0.210486,0.653981),
vec2(0.868587,-0.360271),
vec2(0.128758,0.194311),
vec2(0.16953,0.745415),
vec2(-0.356792,-0.527207),
vec2(0.253578,-0.531846),
vec2(0.315653,0.310831),
vec2(-0.000762939,0.520859),
vec2(-0.648915,0.0229805),
vec2(-0.0580157,-0.160253),
vec2(0.774041,0.968749),
vec2(-0.85345,-0.955687),
vec2(-0.221229,-0.814814),
vec2(0.864559,-0.365642),
vec2(0.147008,0.664663),
vec2(-0.210608,-0.0116276),
vec2(0.0439161,0.839473),
vec2(0.721915,-0.774773),
vec2(0.505661,-0.164159),
vec2(-0.542344,0.991455),
vec2(-0.0693075,-0.939634),
vec2(-0.289102,-0.763237),
vec2(0.887936,-0.319498),
vec2(0.884518,-0.959166),
vec2(0.553331,0.562426),
vec2(0.50145,0.552538),
vec2(-0.911924,0.228248),
vec2(0.108066,-0.894345),
vec2(-0.729362,0.395367),
vec2(0.462874,-0.427168),
vec2(-0.304605,-0.339824),
vec2(0.822932,0.0195624),
vec2(0.84991,0.889279),
vec2(0.140416,0.722648),
vec2(0.383526,0.879452),
vec2(0.981811,-0.3867),
vec2(0.880612,-0.149754),
vec2(-0.0179144,0.209388),
vec2(0.449202,-0.668752),
vec2(-0.353069,-0.902097),
vec2(-0.560839,0.0055238),
vec2(-0.685171,-0.969115),
vec2(-0.398297,0.0735801),
vec2(0.0918913,0.697379),
vec2(-0.997559,-0.301309),
vec2(-0.428449,-0.766961),
vec2(-0.998413,0.0971404),
vec2(-0.847224,0.531358),
vec2(0.61211,0.835139),
vec2(-0.232765,-0.582507),
vec2(0.550035,-0.104221),
vec2(0.830256,0.748161),
vec2(0.28843,0.0773644),
vec2(0.225806,-0.50029),
vec2(0.427656,0.286965),
vec2(0.140538,0.907407),
vec2(-0.305338,-0.709769),
vec2(0.556566,0.716849),
vec2(0.883724,0.481796),
vec2(-0.782403,0.612842),
vec2(-0.949217,-0.763665),
vec2(-0.119358,0.885128),
vec2(0.275002,-0.594348),
vec2(-0.335734,-0.604602),
vec2(0.297952,0.521348),
vec2(-0.692068,0.908017),
vec2(-0.644704,0.268227),
vec2(-0.846187,-0.154332),
vec2(0.51207,-0.210974),
vec2(0.66332,0.534104),
vec2(-0.18601,0.384014),
vec2(0.281838,-0.00302136),
vec2(-0.431745,-0.832942),
vec2(-0.536729,-0.635365),
vec2(-0.934629,0.24247),
vec2(-0.33256,0.958068),
vec2(0.0548418,0.962035),
vec2(0.142491,-0.888607),
vec2(-0.712394,-0.171545),
vec2(-0.694937,-0.20426),
vec2(-0.562853,-0.395428),
vec2(-0.469466,-0.895199),
vec2(0.711905,0.192602),
vec2(0.16599,-0.331889),
vec2(0.471908,0.84521),
vec2(0.578295,-0.94879),
vec2(-0.838557,0.27134),
vec2(0.0497757,-0.79284),
vec2(-0.12888,0.199072),
vec2(0.334391,-0.9588),
vec2(-0.159337,0.957579),
vec2(-0.314066,-0.848628),
vec2(-0.783807,0.641713),
vec2(0.172094,0.807184),
vec2(-0.626148,0.420759),
vec2(-0.914487,0.228919),
vec2(0.121982,-0.445906),
vec2(0.265664,0.231056),
vec2(0.094943,0.677175),
vec2(0.142674,0.2902),
vec2(-0.349162,0.918149),
vec2(0.316874,-0.897641),
vec2(0.585803,-0.589587),
vec2(-0.514084,0.690725),
vec2(-0.0232856,0.76165),
vec2(0.531724,0.126011),
vec2(0.465865,-0.958251),
vec2(-0.419721,-0.0760826),
vec2(0.299112,-0.145909),
vec2(0.846919,-0.820307),
vec2(-0.569201,-0.949889),
vec2(0.078402,0.504135),
vec2(-0.992737,-0.348308),
vec2(0.406354,0.822382),
vec2(0.542039,-0.45732),
vec2(-0.577929,-0.900937),
vec2(0.0943327,-0.507309),
vec2(-0.71221,-0.948668),
vec2(-0.23484,0.0751671),
vec2(0.694327,-0.0870693),
vec2(-0.17893,-0.957274),
vec2(0.479598,-0.689138),
vec2(-0.240211,-0.277993),
vec2(-0.279885,-0.680959),
vec2(-0.369854,-0.00973541),
vec2(0.106784,-0.250832),
vec2(-0.0821253,0.396832),
vec2(-0.581164,-0.257179),
vec2(-0.689688,0.991577),
vec2(-0.0918912,-0.27311),
vec2(0.653188,-0.577441),
vec2(0.405316,0.794488),
vec2(0.41026,-0.133702),
vec2(-0.0377514,-0.42552),
vec2(-0.0596027,-0.648),
vec2(-0.158666,-0.348308),
vec2(-0.0972625,-0.95703),
vec2(-0.335246,-0.399762),
vec2(0.103855,-0.962096),
vec2(0.537523,0.692801),
vec2(0.0985442,0.253822),
vec2(0.954283,0.348064),
vec2(0.85699,-0.0465407),
vec2(0.304727,0.379254),
vec2(0.810907,0.480392),
vec2(-0.210974,0.105258),
vec2(0.591113,-0.237465),
vec2(-0.444441,-0.611438),
vec2(-0.230934,-0.851192),
vec2(-0.126072,-0.33964),
vec2(-0.0854213,-0.860225),
vec2(-0.843989,-0.00271612),
vec2(-0.717277,0.575243),
vec2(0.636647,0.310953),
vec2(-0.558153,-0.158483),
vec2(0.527146,0.713553),
vec2(-0.844111,-0.339152),
vec2(-0.545824,-0.878658),
vec2(-0.167333,0.0252998),
vec2(-0.00381482,0.159825),
vec2(-0.148778,0.837458),
vec2(0.129734,-0.569323),
vec2(0.0808436,0.820917),
vec2(-0.601245,0.206153),
vec2(-0.0964079,0.262612),
vec2(-0.380963,0.610462),
vec2(0.053499,0.150059),
vec2(0.929991,0.352641),
vec2(-0.415387,-0.734916),
vec2(-0.993103,-0.927549),
vec2(-0.719779,-0.202673),
vec2(0.246071,-0.637806),
vec2(0.816523,-0.95996),
vec2(0.734123,0.526658),
vec2(-0.0080874,-0.270058),
vec2(-0.183935,0.143712),
vec2(-0.663869,0.594531),
vec2(0.073275,-0.511277),
vec2(0.410016,-0.331584),
vec2(0.523362,-0.115635),
vec2(-0.890744,-0.0575274),
vec2(0.856258,0.0384228),
vec2(0.28544,-0.0932951),
vec2(-0.482894,-0.567064),
vec2(0.994446,0.550462),
vec2(-0.549974,-0.173376),
vec2(0.687735,-0.617542),
vec2(0.314005,-0.0676596),
vec2(-0.343181,-0.967528),
vec2(0.983886,-0.666189),
vec2(0.0441602,0.997681),
vec2(-0.850398,0.702445),
vec2(0.732963,0.0957977),
vec2(-0.174841,0.377606),
vec2(0.428694,0.188513),
vec2(-0.419843,0.372967),
vec2(0.244117,0.735893),
vec2(0.306742,-0.12949),
vec2(0.100986,0.746086),
vec2(-0.666066,-0.733879),
vec2(0.260659,-0.318155),
vec2(-0.29722,0.827876),
vec2(0.295755,-0.113559),
vec2(-0.587023,-0.970153),
vec2(0.816218,0.0917691),
vec2(-0.544053,0.625538),
vec2(0.261391,0.571032),
vec2(-0.555467,-0.479843),
vec2(0.0713828,-0.501938),
vec2(0.653554,0.50792),
vec2(0.549486,-0.923154),
vec2(-0.71746,0.93408),
vec2(0.728385,-0.997436),
vec2(-0.245827,0.345561),
vec2(0.553514,-0.182836),
vec2(0.859554,-0.807489),
vec2(0.694388,-0.277749),
vec2(0.56444,0.643056),
vec2(0.298074,-0.588733),
vec2(0.287759,0.57329),
vec2(-0.00387585,0.484054),
vec2(0.465316,-0.203284),
vec2(0.478072,0.00521863),
vec2(0.211097,-0.406598),
vec2(-0.0561846,0.770501),
vec2(0.888913,0.602832),
vec2(0.74749,-0.158116),
vec2(0.406476,0.14243),
vec2(0.545091,0.915097),
vec2(0.0447706,0.0148015),
vec2(0.258583,-0.918577),
vec2(0.635304,-0.135044),
vec2(0.169103,-0.452864),
vec2(-0.103183,0.151524),
vec2(0.451155,0.871639),
vec2(-0.254616,-0.206519),
vec2(-0.539109,0.287881),
vec2(-0.610645,0.554979),
vec2(0.0911587,-0.332072),
vec2(-0.977966,-0.768731),
vec2(-0.495102,-0.305094),
vec2(-0.0756554,-0.302103),
vec2(0.560289,0.804315),
vec2(-0.209815,-0.114719),
vec2(0.23954,0.458052),
vec2(-0.912717,-0.257973),
vec2(-0.605457,-0.687307),
vec2(-0.734733,-0.751335),
vec2(-0.879086,-0.155431),
vec2(0.624256,0.545335),
vec2(0.0737022,-0.0055849),
vec2(0.655507,-0.766106),
vec2(0.0370799,-0.60564),
vec2(0.668142,0.920286),
vec2(0.0601519,0.739433),
vec2(-0.487289,0.0553911),
vec2(0.47203,-0.134556),
vec2(0.215491,-0.858577),
vec2(-0.912046,-0.902646),
vec2(0.334697,-0.637684),
vec2(0.919797,-0.571032),
vec2(-0.14713,0.703482),
vec2(-0.297891,0.0975066),
vec2(-0.583972,0.621693),
vec2(0.548326,-0.885067),
vec2(0.733573,-0.671316),
vec2(0.0472121,-0.680776),
vec2(-0.0498368,0.750603),
vec2(-0.886105,-0.492782),
vec2(-0.196081,-0.774957),
vec2(0.907102,-0.787774),
vec2(-0.619251,0.999817),
vec2(-0.875057,0.688955),
vec2(-0.719718,0.593982),
vec2(0.993286,0.666982),
vec2(-0.996765,-0.914243),
vec2(0.256142,-0.562304),
vec2(0.375164,0.387982),
vec2(0.48442,-0.165319),
vec2(-0.183508,0.574145),
vec2(0.01236,-0.328715),
vec2(-0.726005,0.318644),
vec2(0.815485,0.198218),
vec2(0.624195,-0.488021),
vec2(0.643056,0.142491),
vec2(-0.638234,0.114475),
vec2(0.7163,-0.10831),
vec2(0.386517,0.311014),
vec2(0.305948,-0.615467),
vec2(-0.300638,0.0286568),
vec2(0.501083,0.271401),
vec2(0.821894,0.880306),
vec2(0.48149,-0.0933561),
vec2(-0.249611,0.596728),
vec2(0.607288,-0.26426),
vec2(-0.363506,-0.360881),
vec2(0.357524,-0.35551),
vec2(0.384808,0.79577),
vec2(-0.265542,-0.00106817),
vec2(-0.861446,0.628773),
vec2(0.969115,0.546007),
vec2(-0.86523,0.395306),
vec2(0.352702,-0.451765),
vec2(-0.580187,0.984069),
vec2(-0.884213,-0.268838),
vec2(-0.60094,-0.518601),
vec2(0.878903,-0.116855),
vec2(0.391339,0.0705893),
vec2(0.137303,-0.556505),
vec2(0.498886,-0.175451),
vec2(0.595141,-0.858577),
vec2(0.106906,0.95642),
vec2(-0.841731,-0.251808)
};

float PenumbraSize(float zReceiver, float zBlocker) //Parallel plane estimation
{ 
	return (zReceiver - zBlocker) / zBlocker; 
}



float RayCrossToPlane(vec3 Origin, vec3 Direction, vec3 PlaneCenter, vec3 PlaneNormal)
{
	vec3 OP = PlaneCenter - Origin;
    float DdotN = dot(Direction, PlaneNormal);
    if (abs(DdotN) < 0.01f)
    {
            return -1.0f;
    }
    return dot(OP, PlaneNormal) / DdotN;
}

float PCFShadow(vec2 uv, float zReciver, vec2 filterRadiusUV, sampler2D LightDepthBuffer){
	float shadow = 0;
	for ( int i = 0; i < PCF_NUM_SAMPLES; ++i ) 
	{ 
		vec2 offset = poissonDisk[i] * filterRadiusUV.xy;
		float sampleDepth = texture(LightDepthBuffer, uv + offset).r;
		if(sampleDepth < zReciver)
			shadow += 1.0f;
	}
	shadow /= float(PCF_NUM_SAMPLES);
	return 1 - shadow;
}

float CaculateShadow(vec3 FragPos, vec3 Normal){
	if(dot(Normal,LightDirection)>=0.0f)return 0.0f;
	vec4 lightSpaceProjection = (LightSpaceMatrix*vec4(FragPos,1.0f));
	lightSpaceProjection /= lightSpaceProjection.w;
	lightSpaceProjection = lightSpaceProjection*0.5f+0.5f;
	
	vec2 texelSize = textureSize(LightDepthBuffer, 0);
	
	float bias = max(0.005 * (1 - dot(Normal, LightDirection)), 0.0005);
	float currentDepth = lightSpaceProjection.z;

//	FindBlocker
	//float deltaDistance = 6000.0f;
	float zReceiver = (currentDepth-bias)*(NearFarPlane.y-NearFarPlane.x);	//	深度转换到视图空间的距离
	vec2 lightSizeUV = vec2(LIGHT_WORLD_SIZE/LightSize.x,LIGHT_WORLD_SIZE/LightSize.y);
	vec2 searchWidth = lightSizeUV * (zReceiver - NEAR_PLANE) / zReceiver;
	float accum_blocker_depth = 0.0f;
	int num_blockers = 0;

	for( int i = 0; i < BLOCKER_SEARCH_NUM_SAMPLES; ++i ) 
	{ 
		float shadowMapDepth = texture(LightDepthBuffer, lightSpaceProjection.xy + poissonDisk[i] * searchWidth.xy).r;
		if (shadowMapDepth < currentDepth - bias ){
			accum_blocker_depth += shadowMapDepth; 
			num_blockers++; 
		} 
	} 
	
	if(num_blockers==0){
		return 1.0f;
	}

	//float totalDistance = RayCrossToPlane(FragPos, -LightDirection, LightCenter, LightDirection);
	//float blockDistance =  RayCrossToPlane(FragPos, -LightDirection, planeCenter, LightDirection);
	float totalDistance = (NearFarPlane.y-NearFarPlane.x);
	float avg_blocker_depth = accum_blocker_depth/float(num_blockers);
	float avgDistance = totalDistance * avg_blocker_depth;

	float penumbraRatio = PenumbraSize(zReceiver, avgDistance); 
	penumbraRatio = max(0,penumbraRatio);
	
	//vec2 filterSize = vec2(int(penumbraRatio*LightSize.x),int(penumbraRatio*LightSize.y));
	vec2 filterRadiusUV = penumbraRatio * lightSizeUV;
	return PCFShadow(lightSpaceProjection.xy, lightSpaceProjection.z - bias, filterRadiusUV, LightDepthBuffer);
}


void main(){

	float depth = texture2D(DepthBuffer, TexCoords).r;
	//	DepthToWorldPosition
	vec4 NDC = vec4(TexCoords.x * 2.0 - 1.0, TexCoords.y * 2.0 - 1.0, depth * 2.0 - 1, 1.0);
	vec4 worldPos = inverse(view) * inverse(projection) * NDC;
	worldPos /= worldPos.w;
	float distance = length(worldPos.xyz-viewPos);
	if(distance >= 999.0||distance<0.0f)discard;

	vec3 normal = texture2D(NormalBuffer, TexCoords).xyz;
	
	float s = CaculateShadow(worldPos.xyz, normal);
	s = max(0.08,s);
	FragColor = vec4(s,s,s,1.0f);
}